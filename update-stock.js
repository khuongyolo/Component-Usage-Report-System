// C·∫•u h√¨nh Google Sheets API - gi·ªëng v·ªõi trang ch√≠nh
const SHEET_ID = '1NGHViIVB_LYaJs5GqZ6XQ5xv3eNkex3ZjEmVn13ztNI';
const API_KEY = 'YOUR_GOOGLE_SHEETS_API_KEY';
const EMPLOYEES_SHEET_NAME = 'Nh√¢n vi√™n';
const EMPLOYEES_RANGE = 'B2:B';
const COMPONENTS_SHEET_NAME = 'Linh ki·ªán';
const COMPONENTS_RANGE = 'A2:C';
const LOG_SHEET_NAME = 'Nh·∫≠t k√Ω c·∫≠p nh·∫≠t'; // Sheet ri√™ng cho vi·ªác c·∫≠p nh·∫≠t kho

// Tr·∫°ng th√°i ·ª©ng d·ª•ng
let components = {};
let componentStock = {};
let selectedComponents = {}; // Object ch·ª©a linh ki·ªán ƒë√£ ch·ªçn v√† s·ªë l∆∞·ª£ng c·∫ßn TH√äM
let isLoadingComponents = false;

// DOM elements
const form = document.getElementById('stockUpdateForm');
const componentGroup = document.getElementById('componentGroup');
const componentLoading = document.getElementById('componentLoading');
const componentAccordion = document.getElementById('componentAccordion');

// Kh·ªüi t·∫°o ·ª©ng d·ª•ng khi DOM ƒë√£ s·∫µn s√†ng
document.addEventListener('DOMContentLoaded', function() {
    console.log('üöÄ Stock Update System initialized');
    
    loadComponents();
    setupEventListeners();
    
    // Show component group immediately
    showComponentGroup();
});

// Thi·∫øt l·∫≠p event listeners
function setupEventListeners() {
    // Form submission
    form.addEventListener('submit', function(e) {
        e.preventDefault();
        handleFormSubmit();
    });
}

// Load danh s√°ch linh ki·ªán (code gi·ªëng trang ch√≠nh)
async function loadComponents() {
    if (isLoadingComponents) return;

    isLoadingComponents = true;
    showComponentLoading(true);

    try {
        console.log('üì¶ Loading components from Google Sheets...');
        
        const csvUrl = `https://docs.google.com/spreadsheets/d/${SHEET_ID}/gviz/tq?tqx=out:csv&sheet=${encodeURIComponent(COMPONENTS_SHEET_NAME)}&range=${COMPONENTS_RANGE}`;
        
        const response = await fetch(csvUrl);
        
        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }
        
        const csvData = await response.text();
        components = parseCSVComponents(csvData);
        
        if (Object.keys(components).length === 0) {
            throw new Error('Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu linh ki·ªán');
        }
        
        populateComponentAccordion(components);
        console.log(`‚úÖ Loaded ${Object.keys(components).length} component groups successfully`);
        
    } catch (error) {
        console.error('‚ùå Error loading components:', error);
        showError(`Kh√¥ng t·∫£i ƒë∆∞·ª£c linh ki·ªán: ${error.message}`);
    } finally {
        isLoadingComponents = false;
        showComponentLoading(false);
    }
}

// Parse CSV components (code gi·ªëng trang ch√≠nh)
function parseCSVComponents(csvData) {
    const lines = csvData.trim().split('\n');
    const componentGroups = {};
    const groupOrder = [];
    const stockData = {};
    let currentGroup = null;
    
    for (let i = 0; i < lines.length; i++) {
        const line = lines[i].trim();
        if (line) {
            const parts = line.split(',').map(part => part.replace(/"/g, '').trim());
            const groupCell = parts[0];
            const componentCell = parts[1];
            const stockCell = parts[2];
            
            if (groupCell === 'Nh√≥m' || componentCell === 'Linh ki·ªán') {
                continue;
            }
            
            if (groupCell && groupCell.trim() !== '') {
                currentGroup = groupCell.trim();
                
                if (!componentGroups[currentGroup]) {
                    componentGroups[currentGroup] = [];
                    groupOrder.push(currentGroup);
                }
            }
            
            if (componentCell && componentCell.trim() !== '' && currentGroup) {
                const componentName = componentCell.trim();
                const stockQuantity = parseInt(stockCell) || 0;
                
                componentGroups[currentGroup].push(componentName);
                stockData[componentName] = stockQuantity;
            }
        }
    }
    
    componentStock = stockData;
    componentGroups._order = groupOrder;
    
    return componentGroups;
}

// Show component group
function showComponentGroup() {
    console.log('üëÄ Showing component selection step');
    componentGroup.style.display = 'block';
    componentGroup.classList.add('active');
    
    if (Object.keys(components).length > 0) {
        componentAccordion.style.display = 'block';
    }
}

// Populate component accordion (code gi·ªëng trang ch√≠nh)
function populateComponentAccordion(componentGroups) {
    componentAccordion.innerHTML = '';
    
    const groupOrder = componentGroups._order || Object.keys(componentGroups);
    groupOrder.forEach(group => {
        if (group !== '_order' && componentGroups[group]) {
            const groupElement = createComponentGroup(group, componentGroups[group]);
            componentAccordion.appendChild(groupElement);
        }
    });
    
    componentAccordion.style.display = 'block';
}

// Create component group (code gi·ªëng trang ch√≠nh)
function createComponentGroup(groupName, groupComponents) {
    const groupDiv = document.createElement('div');
    groupDiv.className = 'component-group';
    groupDiv.dataset.group = groupName;

    const header = document.createElement('div');
    header.className = 'group-header';
    header.onclick = () => toggleGroup(groupName);
    
    header.innerHTML = `
        <div class="group-title">
            <div class="group-main">
                <span class="group-icon">üì¶</span>
                <span class="group-name">${groupName}</span>
            </div>
            <div class="group-info">(${groupComponents.length} linh ki·ªán)</div>
        </div>
        <span class="expand-icon">‚åÑ</span>
    `;

    const content = document.createElement('div');
    content.className = 'group-content';
    content.id = `group-content-${groupName}`;

    const componentList = document.createElement('div');
    componentList.className = 'component-list';

    groupComponents.forEach((componentName, index) => {
        const componentItem = createComponentItem(componentName, groupName, index);
        componentList.appendChild(componentItem);
    });

    content.appendChild(componentList);
    groupDiv.appendChild(header);
    groupDiv.appendChild(content);

    return groupDiv;
}

// Toggle group (code gi·ªëng trang ch√≠nh)
function toggleGroup(groupName) {
    const header = document.querySelector(`[data-group="${groupName}"] .group-header`);
    const content = document.getElementById(`group-content-${groupName}`);
    const expandIcon = header.querySelector('.expand-icon');

    const isExpanded = content.classList.contains('expanded');

    if (isExpanded) {
        content.classList.remove('expanded');
        header.classList.remove('active');
        expandIcon.classList.remove('expanded');
    } else {
        content.classList.add('expanded');
        header.classList.add('active');
        expandIcon.classList.add('expanded');
    }
}

// Create component item - KH√ÅC v·ªõi trang ch√≠nh (kh√¥ng disable khi h·∫øt h√†ng)
function createComponentItem(componentName, groupName, index) {
    const itemDiv = document.createElement('div');
    itemDiv.className = 'component-item';
    itemDiv.dataset.component = componentName;
    itemDiv.dataset.group = groupName;

    const checkboxId = `component_${groupName}_${index}`;
    const quantityId = `quantity_${groupName}_${index}`;
    const stockQuantity = componentStock[componentName] || 0;
    
    // Kh√¥ng disable cho vi·ªác c·∫≠p nh·∫≠t kho
    const stockDisplay = `Hi·ªán c√≥: ${stockQuantity}`;

    itemDiv.innerHTML = `
        <label for="${checkboxId}" class="component-info-label">
            <div class="component-info">
                <div class="component-main">
                    <input type="checkbox" 
                           id="${checkboxId}" 
                           class="component-checkbox" 
                           value="${componentName}"
                           onchange="handleComponentCheck(this, '${componentName}', '${quantityId}')">
                    <span class="component-name">
                        ${componentName}
                    </span>
                </div>
                <div class="stock-info in-stock">${stockDisplay}</div>
            </div>
        </label>
        <input type="number" 
               id="${quantityId}" 
               class="quantity-input" 
               placeholder="S·ªë l∆∞·ª£ng th√™m" 
               min="1"
               disabled
               style="display: none;"
               onchange="handleQuantityChange(this, '${componentName}')">
    `;

    return itemDiv;
}

// Handle component checkbox - KH√ÅC: placeholder "S·ªë l∆∞·ª£ng th√™m"
function handleComponentCheck(checkbox, componentName, quantityId) {
    const quantityInput = document.getElementById(quantityId);
    const componentItem = checkbox.closest('.component-item');

    if (checkbox.checked) {
        quantityInput.style.display = 'block';
        quantityInput.disabled = false;
        quantityInput.focus();
        quantityInput.value = '1';
        componentItem.classList.add('selected');
        
        selectedComponents[componentName] = 1;
        
        console.log(`‚úÖ Selected component for update: ${componentName}`);
    } else {
        quantityInput.style.display = 'none';
        quantityInput.disabled = true;
        quantityInput.value = '';
        componentItem.classList.remove('selected');
        
        delete selectedComponents[componentName];
        
        console.log(`‚ùå Deselected component: ${componentName}`);
    }
}

// Handle quantity change - KH√ÅC: kh√¥ng c√≥ gi·ªõi h·∫°n max
function handleQuantityChange(input, componentName) {
    const quantity = parseInt(input.value);
    
    if (quantity && quantity > 0) {
        selectedComponents[componentName] = quantity;
        console.log(`üìä Updated add quantity for ${componentName}: ${quantity}`);
    } else {
        input.value = '1';
        selectedComponents[componentName] = 1;
    }
}

// Handle form submission - KH√ÅC: C·ªòNG v√†o thay v√¨ tr·ª´, kh√¥ng c·∫ßn employee
async function handleFormSubmit() {
    // Validate component selection
    if (Object.keys(selectedComponents).length === 0) {
        showError('Vui l√≤ng ch·ªçn √≠t nh·∫•t 1 linh ki·ªán ƒë·ªÉ c·∫≠p nh·∫≠t.');
        const firstGroupHeader = document.querySelector('.group-header');
        if (firstGroupHeader) {
            firstGroupHeader.scrollIntoView({ behavior: 'smooth' });
        }
        return;
    }

    const updateData = {
        components: selectedComponents,
        timestamp: new Date().toISOString(),
        totalItems: Object.keys(selectedComponents).length,
        totalQuantity: Object.values(selectedComponents).reduce((sum, qty) => sum + qty, 0),
        action: 'ADD' // ƒê√°nh d·∫•u ƒë√¢y l√† action th√™m v√†o kho
    };

    console.log('üìã Stock update submitted with data:', updateData);
    
    // Format date for display
    const currentTime = formatDateTimeForSheet(new Date());
    
    // Disable form ƒë·ªÉ tr√°nh submit duplicate
    const submitButton = form.querySelector('.btn-primary');
    submitButton.innerHTML = '<span class="btn-icon">‚è≥</span><span>ƒêang x·ª≠ l√Ω...</span>';
    submitButton.disabled = true;
    
    // Write to Google Sheets v·ªõi action ADD
    try {
        const writeResult = await writeStockUpdateToGoogleSheets(updateData);
        
        if (writeResult.success) {
            submitButton.textContent = '‚úÖ ƒê√£ c·∫≠p nh·∫≠t';
            console.log('üìù Stock update written to Google Sheets:', writeResult);
            
            // Refresh component data
            setTimeout(() => {
                console.log('üîÑ Refreshing component data...');
                loadComponents();
            }, 2000);
            
            // Update local stock data
            if (writeResult.updatedComponents) {
                writeResult.updatedComponents.forEach(item => {
                    componentStock[item.name] = item.newStock;
                });
            }
        }
    } catch (error) {
        console.error('‚ùå Failed to write stock update:', error);
        submitButton.innerHTML = '<span class="btn-icon">‚ùå</span><span>L·ªói k·∫øt n·ªëi</span>';
        showError(`Kh√¥ng k·∫øt n·ªëi ƒë∆∞·ª£c: ${error.message}`);
        
        setTimeout(() => {
            submitButton.innerHTML = '<span class="btn-icon">üîÑ</span><span>Th·ª≠ l·∫°i</span>';
            submitButton.disabled = false;
        }, 3000);
        return;
    }
    
    // Ask for new update
    setTimeout(() => {
        if (confirm('ƒê√£ c·∫≠p nh·∫≠t th√†nh c√¥ng!\n\nC·∫≠p nh·∫≠t th√™m linh ki·ªán kh√°c?')) {
            resetForm();
        }
    }, 2000);
}

// Reset form
function resetForm() {
    const checkboxes = document.querySelectorAll('.component-checkbox');
    const quantityInputs = document.querySelectorAll('.quantity-input');
    
    checkboxes.forEach(checkbox => {
        checkbox.checked = false;
    });
    
    quantityInputs.forEach(input => {
        input.style.display = 'none';
        input.disabled = true;
        input.value = '';
    });
    
    const componentItems = document.querySelectorAll('.component-item');
    componentItems.forEach(item => {
        item.classList.remove('selected');
    });
    
    const groupContents = document.querySelectorAll('.group-content');
    const groupHeaders = document.querySelectorAll('.group-header');
    const expandIcons = document.querySelectorAll('.expand-icon');
    
    groupContents.forEach(content => content.classList.remove('expanded'));
    groupHeaders.forEach(header => header.classList.remove('active'));
    expandIcons.forEach(icon => icon.classList.remove('expanded'));
    
    selectedComponents = {};
    
    const submitButton = form.querySelector('.btn-primary');
    submitButton.innerHTML = '<span class="btn-icon">üì¶</span><span>C·∫≠p nh·∫≠t kho</span>';
    submitButton.disabled = false;
    
    clearMessages();
}

// Utility functions
function showComponentLoading(show) {
    componentLoading.style.display = show ? 'flex' : 'none';
}

function showError(message) {
    clearMessages();
    const errorDiv = createMessageDiv('error', message);
    insertMessage(errorDiv);
}

function showSuccess(message) {
    clearMessages();
    const successDiv = createMessageDiv('success', message);
    insertMessage(successDiv);
}

function createMessageDiv(type, message) {
    const div = document.createElement('div');
    div.className = `message message-${type}`;
    div.innerHTML = `
        <span class="message-icon">${getMessageIcon(type)}</span>
        <span class="message-text">${message}</span>
    `;
    return div;
}

function getMessageIcon(type) {
    const icons = {
        error: '‚ùå',
        success: '‚úÖ'
    };
    return icons[type] || '‚ùå';
}

function insertMessage(messageDiv) {
    const formGroup = document.querySelector('.form-group');
    formGroup.appendChild(messageDiv);
}

function clearMessages() {
    const existingMessages = document.querySelectorAll('.message');
    existingMessages.forEach(msg => msg.remove());
}

// Helper functions ƒë·ªÉ ƒë·ªãnh d·∫°ng d·ªØ li·ªáu
function formatDateTimeForSheet(date) {
    const d = new Date(date);
    const day = String(d.getDate()).padStart(2, '0');
    const month = String(d.getMonth() + 1).padStart(2, '0');
    const year = d.getFullYear();
    const hours = String(d.getHours()).padStart(2, '0');
    const minutes = String(d.getMinutes()).padStart(2, '0');
    
    return `${day}/${month}/${year} ${hours}:${minutes}`;
}

function formatDateForSheet(date) {
    const d = new Date(date);
    const day = String(d.getDate()).padStart(2, '0');
    const month = String(d.getMonth() + 1).padStart(2, '0');
    const year = d.getFullYear();
    
    return `${day}/${month}/${year}`;
}

function formatComponentsForSheet(selectedComponents, components) {
    const result = [];
    
    const componentsByGroup = {};
    
    Object.keys(selectedComponents).forEach(componentName => {
        const quantity = selectedComponents[componentName];
        
        let foundGroup = null;
        Object.keys(components).forEach(groupName => {
            if (components[groupName].includes(componentName)) {
                foundGroup = groupName;
            }
        });
        
        if (foundGroup) {
            if (!componentsByGroup[foundGroup]) {
                componentsByGroup[foundGroup] = [];
            }
            componentsByGroup[foundGroup].push(`${componentName} (+${quantity})`);
        }
    });
    
    Object.keys(componentsByGroup).sort().forEach(groupName => {
        result.push(groupName);
        componentsByGroup[groupName].forEach(component => {
            result.push(`-${component}`);
        });
    });
    
    return result.join('\n');
}

// Write stock update to Google Sheets - Ghi v√†o sheet "Nh·∫≠t k√Ω c·∫≠p nh·∫≠t" v·ªõi format ƒë∆°n gi·∫£n
async function writeStockUpdateToGoogleSheets(updateData) {
    const SCRIPT_URL = 'https://script.google.com/macros/s/AKfycbx7SgfzV4MKsOk2WL6BzVZEwVzcmZDuwNgnViAZby9mRjXZv8rXht1QaSIQBe1Mj5-MuA/exec';
    
    try {
        const submissionTime = formatDateTimeForSheet(new Date());
        const componentsText = formatComponentsForSheet(updateData.components, components);
        
        // Format ƒë∆°n gi·∫£n:
        // C·ªôt 1: th·ªùi gian g·ª≠i form
        // C·ªôt 2: chi ti·∫øt linh ki·ªán ƒë∆∞·ª£c b·ªï sung
        const rowData = [
            submissionTime,           // C·ªôt 1: Th·ªùi gian g·ª≠i form
            componentsText           // C·ªôt 2: Chi ti·∫øt linh ki·ªán ƒë∆∞·ª£c b·ªï sung
        ];
        
        const params = new URLSearchParams({
            action: 'addStockUpdate', // Action ri√™ng ƒë·ªÉ ghi v√†o sheet "Nh·∫≠t k√Ω c·∫≠p nh·∫≠t"
            col1: rowData[0],
            col2: rowData[1]
        });
        
        const fullUrl = `${SCRIPT_URL}?${params.toString()}`;
        console.log('üåê Making stock update request to:', fullUrl);
        
        const response = await fetch(fullUrl, {
            method: 'GET',
            mode: 'no-cors'
        });
        
        return {
            success: true,
            data: rowData,
            message: 'C·∫≠p nh·∫≠t kho ƒë√£ ƒë∆∞·ª£c ghi v√†o sheet "Nh·∫≠t k√Ω c·∫≠p nh·∫≠t"'
        };
        
    } catch (error) {
        console.error('Error writing stock update:', error);
        throw error;
    }
}
